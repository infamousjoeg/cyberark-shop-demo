- name: Install Istio Service Mesh
  hosts: localhost
  connection: local
  gather_facts: yes
  vars_files:
    - vars/vars.yml
  tasks:
    # First, determine actual Docker config path (expanding home directory)
    - name: Set Docker config path
      set_fact:
        docker_config_path: "{{ ansible_env.HOME }}/.docker/config.json"

    # Check if the config file exists before attempting to use it
    - name: Check if Docker config exists
      stat:
        path: "{{ docker_config_path }}"
      register: docker_config_file

    # Add debug information to help troubleshoot
    - name: Debug Docker config information
      debug:
        msg: "Docker config path: {{ docker_config_path }}, Exists: {{ docker_config_file.stat.exists | default(false) }}"

    # Create an empty Docker config if it doesn't exist
    - name: Create Docker config directory
      file:
        path: "{{ ansible_env.HOME }}/.docker"
        state: directory
        mode: '0755'
      when: not docker_config_file.stat.exists

    # Create a minimal Docker config if needed
    - name: Create minimal Docker config if not exists
      copy:
        dest: "{{ docker_config_path }}"
        content: '{"auths":{}}'
        mode: '0644'
      when: not docker_config_file.stat.exists
      register: docker_config_created

    # Read Docker config with command if it exists
    - name: Read Docker config with command
      command: "cat {{ docker_config_path }}"
      register: docker_config_content
      changed_when: false
      when: docker_config_file.stat.exists
      # Ignore errors in case cat fails but file exists
      ignore_errors: yes
      no_log: false  # For debugging, normally set to true for security

    - name: Create Docker Hub image pull secret from local config.json
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: dockerhub-creds
            namespace: istio-system
          type: kubernetes.io/dockerconfigjson
          data:
            .dockerconfigjson: "{{ (docker_config_content.stdout | b64encode) if (docker_config_content is defined and docker_config_content.rc == 0) else '{\"auths\":{}}' | b64encode }}"

    - name: Add Istio Helm Repository
      kubernetes.core.helm_repository:
        name: istio
        repo_url: "https://istio-release.storage.googleapis.com/charts"

    - name: Update Helm repositories
      ansible.builtin.command:
        cmd: helm repo update

    - name: Install Istio Base (CRDs)
      kubernetes.core.helm:
        name: istio-base
        chart_ref: istio/base
        release_namespace: istio-system
        create_namespace: yes
        wait: yes
        values:
          global:
            imagePullSecrets:
              - dockerhub-creds

    - name: Apply Istio Configuration with Helm
      kubernetes.core.helm:
        name: istiod
        chart_ref: istio/istiod
        release_namespace: istio-system
        create_namespace: yes
        values:
          global:
            caAddress: "cert-manager-istio-csr.cyberark.svc:443"
            trustDomain: "cluster.local"
            imagePullPolicy: IfNotPresent
            imagePullSecrets:
              - dockerhub-creds
          components:
            pilot:
              k8s:
                env:
                  - name: ENABLE_CA_SERVER
                    value: "false"

    - name: Install Istio Ingress Gateway
      kubernetes.core.helm:
        name: istio-ingressgateway
        chart_ref: istio/gateway
        release_namespace: istio-system
        create_namespace: yes
        values:
          global:
            caAddress: "cert-manager-istio-csr.cyberark.svc:443"
          imagePullPolicy: IfNotPresent
          imagePullSecrets:
            - name: dockerhub-creds

    - name: Install Istio Egress Gateway
      kubernetes.core.helm:
        name: istio-egressgateway
        chart_ref: istio/gateway
        release_namespace: istio-system
        create_namespace: yes
        values:
          global:
            caAddress: "cert-manager-istio-csr.cyberark.svc:443"
          imagePullPolicy: IfNotPresent
          imagePullSecrets:
            - name: dockerhub-creds

    - name: Apply Peer Authentication for Istio
      ansible.builtin.template:
        src: "files/templates/servicemesh/peerauthentication.yaml.j2"
        dest: "files/artifacts/venafi-install/peerauthentication.yaml"
        mode: '0644'

    - name: Apply Peer Authentication Policy
      kubernetes.core.k8s:
        state: present
        namespace: "istio-system"
        src: "files/artifacts/venafi-install/peerauthentication.yaml"
